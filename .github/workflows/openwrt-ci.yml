#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-CI

on:
  push:
    branches: 
      - master
  # schedule:
  #   - cron: 0 20 * * *
  release:
    types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir
          # ln -s -f /mnt/openwrt/build_dir/host ./build_dir/host
          # ln -s -f /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir
          df -h
      - name: 添加插件
        run: |
          mkdir package/other
          #添加 fw876/helloworld
          sed -i "s/#src-git helloworld/src-git helloworld/g" feeds.conf.default
          git clone https://github.com/rufengsuixing/luci-app-adguardhome.git package/other/luci-app-adguardhome
          #clash
          git clone https://github.com/frainzy1477/luci-app-clash.git package/other/luci-app-clash
          #京东签到
          git clone https://github.com/jerrykuku/luci-app-jd-dailybonus.git package/other/luci-app-jd-dailybonus
          #微信推送
          git clone https://github.com/tty228/luci-app-serverchan.git package/other/luci-app-serverchan
          #vssr
          git clone https://github.com/jerrykuku/lua-maxminddb.git package/other/lua-maxminddb 
          git clone https://github.com/jerrykuku/luci-app-vssr.git package/other/luci-app-vssr
          #主题
          rm -rf ./package/lean/luci-theme-argon  
          git clone -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git ./package/lean/luci-theme-argon
          #smart dns
          WORKINGDIR="`pwd`/feeds/packages/net/smartdns"
          mkdir $WORKINGDIR -p
          rm $WORKINGDIR/* -fr
          wget https://github.com/pymumu/openwrt-smartdns/archive/master.zip -O $WORKINGDIR/master.zip
          unzip $WORKINGDIR/master.zip -d $WORKINGDIR
          mv $WORKINGDIR/openwrt-smartdns-master/* $WORKINGDIR/
          rmdir $WORKINGDIR/openwrt-smartdns-master
          rm $WORKINGDIR/master.zip
          LUCIBRANCH="lede" 
          WORKINGDIR="`pwd`/feeds/luci/applications/luci-app-smartdns"
          mkdir $WORKINGDIR -p
          rm $WORKINGDIR/* -fr
          wget https://github.com/pymumu/luci-app-smartdns/archive/${LUCIBRANCH}.zip -O $WORKINGDIR/${LUCIBRANCH}.zip
          unzip $WORKINGDIR/${LUCIBRANCH}.zip -d $WORKINGDIR
          mv $WORKINGDIR/luci-app-smartdns-${LUCIBRANCH}/* $WORKINGDIR/
          rmdir $WORKINGDIR/luci-app-smartdns-${LUCIBRANCH}
          rm $WORKINGDIR/${LUCIBRANCH}.zip
      - name: 优化配置
        run: |
          #隐藏首页显示用户名
          sed -i 's/name="luci_username" value="<%=duser%>"/name="luci_username"/g' feeds/luci/modules/luci-base/luasrc/view/sysauth.htm
          #移动光标至第一格
          sed -i "s/'luci_password'/'luci_username'/g" feeds/luci/modules/luci-base/luasrc/view/sysauth.htm
          #修改固件生成名字,增加当天日期(by:左右）
          sed -i 's/IMG_PREFIX:=$(VERSION_DIST_SANITIZED)/IMG_PREFIX:=[$(shell date +%Y%m%d)]-$(VERSION_DIST_SANITIZED)/g' include/image.mk
          #增加首页温度显示
          temperature_if=$(grep -o "@TARGET_x86" package/lean/autocore/Makefile | wc -l)
          if [[ "$temperature_if" == "1" ]]; then
          rm -rf package/lean/autocore/files/autocore
          sed -i "s/@TARGET_x86/@(i386||x86_64||arm||mipsel||mips||aarch64)/g"  package/lean/autocore/Makefile
          cp $HOME/$OW/$SF/$OCS/Warehouse/index_temperature/autocore  package/lean/autocore/files/autocore
          cp $HOME/$OW/$SF/$OCS/Warehouse/index_temperature/temperature package/lean/autocore/files/sbin/temperature
          else
          echo "temperature添加完成"
          fi
          #首页显示编译时间
          Compile_time_if=$(grep -o "#首页显示编译时间" feeds/luci/modules/luci-base/po/zh-cn/base.po)
          if [[ "$Compile_time_if" == "#首页显示编译时间" ]]; then
          echo "已添加首页显示编译时间"
          else
          sed -i '$a \       ' feeds/luci/modules/luci-base/po/zh-cn/base.po
          sed -i '$a #首页显示编译时间' feeds/luci/modules/luci-base/po/zh-cn/base.po
          sed -i '$a msgid "Compile_time"' feeds/luci/modules/luci-base/po/zh-cn/base.po
          sed -i '$a msgstr "固件编译时间"' feeds/luci/modules/luci-base/po/zh-cn/base.po
          sed -i '$d' package/lean/default-settings/files/zzz-default-settings
          sed -i '$d' package/lean/default-settings/files/zzz-default-settings
          echo "echo \"`date "+%Y-%m-%d %H:%M"` (commit:`git log -1 --format=format:'%C(bold white)%h%C(reset)'`)\" >> /etc/Compile_time" >> package/lean/default-settings/files/zzz-default-settings
          echo "exit 0" >> package/lean/default-settings/files/zzz-default-settings
          fi
          #采用lisaac的luci-app-dockerman
          if [[ -e package/lean/luci-app-dockerman ]]; then
          rm -rf package/lean/luci-app-dockerman
          fi
          if [[ -e package/other/luci-app-dockerman ]]; then
          cd  package/other/luci-app-dockerman
          git pull
          cd ../../../
          else
          git clone https://github.com/lisaac/luci-app-dockerman.git package/other/luci-app-dockerman
          fi
          :<<'COMMENT'
          dockerman_display=$(grep -o "docker" package/other/luci-app-dockerman/luasrc/view/dockerman/overview.htm | wc -l)
          if [[ "$dockerman_display" == "0" ]]; then
          echo ""
          else
          grep "docker" -rl package/other/luci-app-dockerman/luasrc/* | xargs sed -i 's/docker/services/g'
          fi
          COMMENT
      
      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: Generate configuration file
        run: |
          rm -f ./.config*
          wget http://i.om2.cc:9998/Config/lede
          mv lede .config
          #
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          # 例如:
          #cat >> .config <<EOF
          #CONFIG_TARGET_IMAGES_GZIP=y
          #CONFIG_KERNEL_BUILD_USER="OpenWrt-CI"
          #CONFIG_KERNEL_BUILD_DOMAIN="Azure"
          #EOF
          #
          # ===============================================================
          # 
          #sed -i 's/^[ \t]*//g' ./.config
          make defconfig
      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h
      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true
      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
